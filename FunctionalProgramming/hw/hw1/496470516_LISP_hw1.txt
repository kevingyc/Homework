(a) recursion

(defun pos+ (lst) (setf l 0)	
	(if (consp lst) (add 0 lst) lst))

(defun add (n c)
	(if (null c) nil (cons (+ (car c) n) (add (+ n 1) (cdr c)) )))



(b) iteration

(defun pos+ (lst)
(setq i 0 a nil)
  (loop 
    (push (+ (car lst) i) a)
    (setq i (+ i 1))
    (setf lst (cdr lst))
      (when (null lst) (return (reverse a)) ) ) )


(c) mapcar  

(defun pos+ (lst) (setf l 0)
  (mapcar #'(lambda (x y) (+ x y)) lst '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20) ) )

/*
(defun pos+ (lst) (setf l 0) (setf n -1)
  (mapcar #'(lambda (x) (setf n (+ n 1)) (+ n x) ) lst  ) )
*/



